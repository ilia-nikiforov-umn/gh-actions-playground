on: 
  workflow_call:
    secrets:
        ACCESS_TOKEN:
            required: true


name: send-pr-on-release

jobs:
  send-pull-requests:
    runs-on: ubuntu-latest
    steps:
      - name: Send pull-request
        run: |
          RELEASE_TAG=$(cut -d'/' -f 3 <<< "$GITHUB_REF")
          # Strip off the leading "v" from the release tag, if present
          PYPI_VERSION=$(sed -n 's/^v*\([0-9]\+.[0-9]\+.[0-9]\)/\1/p' <<< "$RELEASE_TAG")
          # check that the sed pattern matched something
          [[ "$PYPI_VERSION" != "" ]]
          USER="ilia-nikiforov-umn"
          REPOSITORY="gh-actions-playground"
          BRANCH_NAME="update-$GITHUB_REPOSITORY-to-$RELEASE_TAG"

          # Clone the remote repository and change working directory to the
          # folder it was cloned to.
          
          # Store the PAT in a file that can be accessed by the
          # GitHub CLI.
          echo "${{ secrets.ACCESS_TOKEN }}" > token.txt
          gh auth login --with-token < token.txt
          gh auth setup-git
          gh repo clone $USER/$REPOSITORY

          cd $REPOSITORY

          # Setup the committers identity.
          git config user.email "nikif002@umn.com"
          git config user.name "ilia's robot"

          # Create a new feature branch for the changes.
          git checkout -b $BRANCH_NAME

          echo "$GITHUB_REPOSITORY==$PYPI_VERSION" >> README.md

          # Commit the changes and push the feature branch to origin
          git add .
          git commit -m "update $GITHUB_REPOSITORY to $RELEASE_TAG"
          git push origin $BRANCH_NAME


          # Authorize GitHub CLI for the current repository and
          # create a pull-requests containing the updates.
          gh pr create \
            --body " " \
            --title "update $GITHUB_REPOSITORY to $RELEASE_TAG" \
            --head "$BRANCH_NAME" \
            --base "main"
